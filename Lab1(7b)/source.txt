/* Реализация интерфейса модуля с функциями для меню. */
#include "pch.h"
#include "cons_utils.h"

namespace fl
{
	// Вспомогательная.
	// Пропустить символ конца строки.
	void get_eoln()
	{
		while (getchar() != '\n');
	}

	// Вспомогательная.
	// Прочитать число.
	int32_t get_number(std::string text, int32_t min, int32_t max = INT32_MAX)
	{	
		if (text != "")
			std::cout << text << " ";
		int32_t number;
		std::cin >> number;
		get_eoln();
		if (!std::cin.good())
			throw new std::exception("Невозможно прочитать число.");
		if ((number < min) || (number > max))
			throw new std::out_of_range("Число выходит за пределы заданного диапазона.");
		return number;
	}

	// Вспомогательная.
	// Прочитать строку.
	std::string get_string(std::string text = "")
	{
		if (text != "")
			std::cout << text << " ";
		std::string line;
		std::getline(std::cin, line);
		return line;
	}

	// Вспомогательная.
	// Напечатать меню.
	void print_menu(bool is_empty = false)
	{
		std::cout << "1. Заполнить файл случайными числами." << std::endl;
		std::cout << "2. Заполнить list из файла." << std::endl;
		if (!is_empty)
		{
			std::cout << "3. Вывести list." << std::endl;
			std::cout << "4. Преобразовать функцией modify." << std::endl;
			std::cout << "5. Преобразовать функцией transform." << std::endl;
			std::cout << "6. Преобразовать функцией for_each." << std::endl;
			std::cout << "7. Найти сумму чисел." << std::endl;
			std::cout << "8. Найти среднее арифметическое чисел." << std::endl;
		}
		std::cout << "0. Выход." << std::endl;
	}

	// Вспомогательная.
	// Запустить функцию из доступных.
	void run_function(int32_t option, std::list<float>& numbers)
	{
		switch (option)
		{
		case (1): {
			std::string fname = get_string("Введите имя файла:");
			uint32_t count = static_cast<uint32_t>(get_number("Введите количество чисел:", 1));
			uint16_t mod = static_cast<uint16_t>(get_number("Введите максимальный модуль чисел:", 1));
			std::ifstream fi = (1 == get_number("Заполнить файл через цикл или std::generate? (цикл = 1 / std::generate = 2):", 1, 2)) ?
				fl::create_fill_by_cycle(count, mod, fname) : fl::create_fill_by_gen(count, mod, fname);
			std::cout << "Файл заполнен." << std::endl;
			break;
		}
		case (2): {
			numbers = fl::fill_list(std::ifstream(fl::get_fpath(get_string("Введите имя файла:"))));
			std::cout << "list заполнен." << std::endl;
			break;
		}
		case (3): {
			if (1 == get_number("Вывести list в консоль или в файл (консоль = 1 / файл = 2):", 1, 2))
			{
				std::cout << "Содержимое list:" << std::endl;
				fl::write(numbers);
			}	
			else
			{
				fl::write(numbers, std::ofstream(fl::get_fpath(get_string("Введите имя файла:"))));
				std::cout << "Файл заполнен." << std::endl;
			}
			break;
		}
		case (4): {
			if (1 == get_number("Преобразовать функцией modify (передавать контейнер = 1 / передавать итераторы = 2):", 1, 2))
				numbers = fl::modify(numbers);
			else
				numbers = fl::modify(numbers.begin(), numbers.end());
			std::cout << "list преобразован." << std::endl;
			break;
		}
		case (5): {
			if (1 == get_number("Преобразовать функцией std::transform (передавать контейнер = 1 / передавать итераторы = 2):", 1, 2))
				fl::transform(numbers);
			else
				fl::transform(numbers.begin(), numbers.end());
			std::cout << "list преобразован." << std::endl;
			break;
		}
		case (6): {
			if (1 == get_number("Преобразовать функцией std::for_each (передавать контейнер = 1 / передавать итераторы = 2):", 1, 2))
				fl::for_each(numbers);
			else
				fl::for_each(numbers.begin(), numbers.end());
			std::cout << "list преобразован." << std::endl;
			break;
		}
		case (7): {
			std::cout << "Сумма чисел равна: " << fl::sum(numbers) << std::endl;
			break;
		}
		case (8): {
			std::cout << "Среднее арифметическое чисел равно: " << fl::average(numbers) << std::endl;
			break;
		}
		case (0): {
			std::cout << "Программа завершена.";
			break;
		}
		}
	}

	// Основная.
	// Главное меню.
	void menu()
	{
		std::list<float> numbers;
		int32_t option;
		do {
			print_menu(numbers.empty());
			try
			{
				option = get_number("Выберите действие:", 0, numbers.empty() ? 2 : 8);
				run_function(option, numbers);
			}
			catch (std::exception* err_ptr)
			{
				std::cout << err_ptr->what() << std::endl;
			}
			catch (...)
			{
				std::cout << "Неизвестная ошибка." << std::endl;
			}
			std::cout << std::endl << std::endl;
		} while (option != 0);
	}

}